import { useRef, useEffect } from 'react';

function isEqual(a, b) {
  if (a.length !== b.length) return false;

  for (var i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) {
      return false;
    }
  }

  return true;
}

export function useStableMemo(factory, deps) {
  var isValid = true;
  var valueRef = useRef(); // initial hook call

  if (!valueRef.current) {
    valueRef.current = {
      deps: deps,
      result: factory() // subsequent calls

    };
  } else {
    isValid = !!(deps && valueRef.current.deps && isEqual(deps, valueRef.current.deps));
  }

  var cache = isValid ? valueRef.current : {
    deps: deps,
    result: factory()
  };
  useEffect(function () {
    valueRef.current = cache;
  });
  return cache.result;
}