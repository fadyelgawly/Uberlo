{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPopupState = createPopupState;\nexports.anchorRef = anchorRef;\nexports.bindTrigger = bindTrigger;\nexports.bindToggle = bindToggle;\nexports.bindHover = bindHover;\nexports.bindPopover = bindPopover;\nexports.bindPopper = bindPopper;\nexports.bindMenu = exports.initCoreState = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n/* eslint-env browser */\n\n\nvar eventOrAnchorElWarned = false;\nvar initCoreState = {\n  isOpen: false,\n  setAnchorElUsed: false,\n  anchorEl: null,\n  hovered: false,\n  _childPopupState: null\n};\nexports.initCoreState = initCoreState;\n\nfunction createPopupState(_ref) {\n  var state = _ref.state,\n      _setState = _ref.setState,\n      parentPopupState = _ref.parentPopupState,\n      popupId = _ref.popupId,\n      variant = _ref.variant;\n  var isOpen = state.isOpen,\n      setAnchorElUsed = state.setAnchorElUsed,\n      anchorEl = state.anchorEl,\n      hovered = state.hovered,\n      _childPopupState = state._childPopupState; // use lastState to workaround cases where setState is called multiple times\n  // in a single render (e.g. because of refs being called multiple times)\n\n  var lastState = state;\n\n  var setState = function setState(nextState) {\n    if (hasChanges(lastState, nextState)) {\n      _setState(lastState = (0, _objectSpread2.default)({}, lastState, nextState));\n    }\n  };\n\n  var setAnchorEl = function setAnchorEl(_anchorEl) {\n    setState({\n      setAnchorElUsed: true,\n      anchorEl: _anchorEl\n    });\n  };\n\n  var toggle = function toggle(eventOrAnchorEl) {\n    if (isOpen) close();else open(eventOrAnchorEl);\n  };\n\n  var open = function open(eventOrAnchorEl) {\n    if (!eventOrAnchorElWarned && !eventOrAnchorEl && !setAnchorElUsed) {\n      eventOrAnchorElWarned = true;\n      /* eslint-disable no-console */\n\n      console.error('eventOrAnchorEl should be defined if setAnchorEl is not used');\n      /* eslint-enable no-console */\n    }\n\n    if (parentPopupState) {\n      if (!parentPopupState.isOpen) return;\n\n      parentPopupState._setChildPopupState(popupState);\n    }\n\n    if ((typeof document === \"undefined\" ? \"undefined\" : (0, _typeof2.default)(document)) === 'object' && document.activeElement) {\n      document.activeElement.blur();\n    }\n\n    var newState = {\n      isOpen: true,\n      hovered: eventOrAnchorEl && eventOrAnchorEl.type === 'mouseenter'\n    };\n\n    if (eventOrAnchorEl && eventOrAnchorEl.currentTarget) {\n      if (!setAnchorElUsed) {\n        newState.anchorEl = eventOrAnchorEl.currentTarget;\n      }\n    } else if (eventOrAnchorEl) {\n      newState.anchorEl = eventOrAnchorEl;\n    }\n\n    setState(newState);\n  };\n\n  var close = function close() {\n    if (_childPopupState) _childPopupState.close();\n    if (parentPopupState) parentPopupState._setChildPopupState(null);\n    setState({\n      isOpen: false,\n      hovered: false\n    });\n  };\n\n  var setOpen = function setOpen(nextOpen, eventOrAnchorEl) {\n    if (nextOpen) {\n      open(eventOrAnchorEl);\n    } else close();\n  };\n\n  var onMouseLeave = function onMouseLeave(event) {\n    var relatedTarget = event.relatedTarget;\n\n    if (hovered && !isElementInPopup(relatedTarget, popupState)) {\n      close();\n    }\n  };\n\n  var _setChildPopupState = function _setChildPopupState(_childPopupState) {\n    return setState({\n      _childPopupState: _childPopupState\n    });\n  };\n\n  var popupState = {\n    anchorEl: anchorEl,\n    setAnchorEl: setAnchorEl,\n    setAnchorElUsed: setAnchorElUsed,\n    popupId: popupId,\n    variant: variant,\n    isOpen: isOpen,\n    open: open,\n    close: close,\n    toggle: toggle,\n    setOpen: setOpen,\n    onMouseLeave: onMouseLeave,\n    _childPopupState: _childPopupState,\n    _setChildPopupState: _setChildPopupState\n  };\n  return popupState;\n}\n/**\n * Creates a ref that sets the anchorEl for the popup.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\n\n\nfunction anchorRef(_ref2) {\n  var setAnchorEl = _ref2.setAnchorEl;\n  return function (el) {\n    if (el) setAnchorEl(el);\n  };\n}\n/**\n * Creates props for a component that opens the popup when clicked.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\n\n\nfunction bindTrigger(_ref3) {\n  var _ref4;\n\n  var isOpen = _ref3.isOpen,\n      open = _ref3.open,\n      popupId = _ref3.popupId,\n      variant = _ref3.variant;\n  return _ref4 = {}, (0, _defineProperty2.default)(_ref4, variant === 'popover' ? 'aria-owns' : 'aria-describedby', isOpen ? popupId : null), (0, _defineProperty2.default)(_ref4, 'aria-haspopup', variant === 'popover' ? true : undefined), (0, _defineProperty2.default)(_ref4, \"onClick\", open), _ref4;\n}\n/**\n * Creates props for a component that toggles the popup when clicked.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\n\n\nfunction bindToggle(_ref5) {\n  var _ref6;\n\n  var isOpen = _ref5.isOpen,\n      toggle = _ref5.toggle,\n      popupId = _ref5.popupId,\n      variant = _ref5.variant;\n  return _ref6 = {}, (0, _defineProperty2.default)(_ref6, variant === 'popover' ? 'aria-owns' : 'aria-describedby', isOpen ? popupId : null), (0, _defineProperty2.default)(_ref6, 'aria-haspopup', variant === 'popover' ? true : undefined), (0, _defineProperty2.default)(_ref6, \"onClick\", toggle), _ref6;\n}\n/**\n * Creates props for a component that opens the popup while hovered.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\n\n\nfunction bindHover(_ref7) {\n  var _ref8;\n\n  var isOpen = _ref7.isOpen,\n      open = _ref7.open,\n      onMouseLeave = _ref7.onMouseLeave,\n      popupId = _ref7.popupId,\n      variant = _ref7.variant;\n  return _ref8 = {}, (0, _defineProperty2.default)(_ref8, variant === 'popover' ? 'aria-owns' : 'aria-describedby', isOpen ? popupId : null), (0, _defineProperty2.default)(_ref8, 'aria-haspopup', variant === 'popover' ? true : undefined), (0, _defineProperty2.default)(_ref8, \"onMouseEnter\", open), (0, _defineProperty2.default)(_ref8, \"onMouseLeave\", onMouseLeave), _ref8;\n}\n/**\n * Creates props for a `Popover` component.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\n\n\nfunction bindPopover(_ref9) {\n  var isOpen = _ref9.isOpen,\n      anchorEl = _ref9.anchorEl,\n      close = _ref9.close,\n      popupId = _ref9.popupId,\n      onMouseLeave = _ref9.onMouseLeave;\n  return {\n    id: popupId,\n    anchorEl: anchorEl,\n    open: isOpen,\n    onClose: close,\n    onMouseLeave: onMouseLeave\n  };\n}\n/**\n * Creates props for a `Menu` component.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\n\n\nvar bindMenu = bindPopover;\n/**\n * Creates props for a `Popper` component.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\n\nexports.bindMenu = bindMenu;\n\nfunction bindPopper(_ref10) {\n  var isOpen = _ref10.isOpen,\n      anchorEl = _ref10.anchorEl,\n      popupId = _ref10.popupId;\n  return {\n    id: popupId,\n    anchorEl: anchorEl,\n    open: isOpen\n  };\n}\n\nfunction getPopup(_ref11) {\n  var popupId = _ref11.popupId;\n  return popupId && typeof document !== 'undefined' ? document.getElementById(popupId) // eslint-disable-line no-undef\n  : null;\n}\n\nfunction isElementInPopup(element, popupState) {\n  var anchorEl = popupState.anchorEl,\n      _childPopupState = popupState._childPopupState;\n  return isAncestor(anchorEl, element) || isAncestor(getPopup(popupState), element) || _childPopupState != null && isElementInPopup(element, _childPopupState);\n}\n\nfunction isAncestor(parent, child) {\n  if (!parent) return false;\n\n  while (child) {\n    if (child === parent) return true;\n    child = child.parentElement;\n  }\n\n  return false;\n}\n\nfunction hasChanges(state, nextState) {\n  for (var key in nextState) {\n    if (state.hasOwnProperty(key) && state[key] !== nextState[key]) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"script"}